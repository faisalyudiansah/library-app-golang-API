// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dtos "library-api/dtos"

	mock "github.com/stretchr/testify/mock"
)

// BookService is an autogenerated mock type for the BookService type
type BookService struct {
	mock.Mock
}

// GetAllBookService provides a mock function with given fields: _a0, _a1
func (_m *BookService) GetAllBookService(_a0 context.Context, _a1 string) ([]dtos.ResponseBook, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBookService")
	}

	var r0 []dtos.ResponseBook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]dtos.ResponseBook, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []dtos.ResponseBook); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.ResponseBook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostBookService provides a mock function with given fields: _a0, _a1
func (_m *BookService) PostBookService(_a0 context.Context, _a1 dtos.RequestPostBook) (dtos.ResponseBook, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PostBookService")
	}

	var r0 dtos.ResponseBook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dtos.RequestPostBook) (dtos.ResponseBook, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dtos.RequestPostBook) dtos.ResponseBook); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(dtos.ResponseBook)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dtos.RequestPostBook) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookService creates a new instance of BookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookService {
	mock := &BookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
